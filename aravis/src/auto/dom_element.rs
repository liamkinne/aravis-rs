// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{ffi, DomNode};
use glib::{prelude::*, translate::*};

glib::wrapper! {
///
///
/// This is an Abstract Base Class, you cannot instantiate it.
///
/// # Implements
///
/// [`DomElementExt`][trait@crate::prelude::DomElementExt], [`DomNodeExt`][trait@crate::prelude::DomNodeExt], [`trait@glib::ObjectExt`]
	#[doc(alias = "ArvDomElement")]
	pub struct DomElement(Object<ffi::ArvDomElement, ffi::ArvDomElementClass>) @extends DomNode;

	match fn {
		type_ => || ffi::arv_dom_element_get_type(),
	}
}

impl DomElement {
	pub const NONE: Option<&'static DomElement> = None;
}

unsafe impl Send for DomElement {}

mod sealed {
	pub trait Sealed {}
	impl<T: super::IsA<super::DomElement>> Sealed for T {}
}

/// Trait containing all [`struct@DomElement`] methods.
///
/// # Implementors
///
/// [`DomElement`][struct@crate::DomElement], [`GcNode`][struct@crate::GcNode]
pub trait DomElementExt: IsA<DomElement> + sealed::Sealed + 'static {
	#[doc(alias = "arv_dom_element_get_attribute")]
	#[doc(alias = "get_attribute")]
	fn attribute(&self, name: &str) -> Option<glib::GString> {
		unsafe {
			from_glib_none(ffi::arv_dom_element_get_attribute(
				self.as_ref().to_glib_none().0,
				name.to_glib_none().0,
			))
		}
	}

	#[doc(alias = "arv_dom_element_get_tag_name")]
	#[doc(alias = "get_tag_name")]
	fn tag_name(&self) -> Option<glib::GString> {
		unsafe {
			from_glib_none(ffi::arv_dom_element_get_tag_name(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	#[doc(alias = "arv_dom_element_set_attribute")]
	fn set_attribute(&self, name: &str, attribute_value: &str) {
		unsafe {
			ffi::arv_dom_element_set_attribute(
				self.as_ref().to_glib_none().0,
				name.to_glib_none().0,
				attribute_value.to_glib_none().0,
			);
		}
	}
}

impl<O: IsA<DomElement>> DomElementExt for O {}
