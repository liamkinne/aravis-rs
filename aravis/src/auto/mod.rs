// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

mod buffer;
pub use self::buffer::Buffer;

mod camera;
pub use self::camera::Camera;

mod chunk_parser;
pub use self::chunk_parser::ChunkParser;

mod device;
pub use self::device::Device;

mod dom_character_data;
pub use self::dom_character_data::DomCharacterData;

mod dom_document;
pub use self::dom_document::DomDocument;

mod dom_document_fragment;
pub use self::dom_document_fragment::DomDocumentFragment;

mod dom_element;
pub use self::dom_element::DomElement;

mod dom_named_node_map;
pub use self::dom_named_node_map::DomNamedNodeMap;

mod dom_node;
pub use self::dom_node::DomNode;

mod dom_node_child_list;
pub use self::dom_node_child_list::DomNodeChildList;

mod dom_node_list;
pub use self::dom_node_list::DomNodeList;

mod dom_text;
pub use self::dom_text::DomText;

mod evaluator;
pub use self::evaluator::Evaluator;

mod fake_camera;
pub use self::fake_camera::FakeCamera;

mod fake_device;
pub use self::fake_device::FakeDevice;

mod fake_interface;
pub use self::fake_interface::FakeInterface;

mod fake_stream;
pub use self::fake_stream::FakeStream;

mod gc;
pub use self::gc::Gc;

mod gc_boolean;
pub use self::gc_boolean::GcBoolean;

mod gc_category;
pub use self::gc_category::GcCategory;

mod gc_command;
pub use self::gc_command::GcCommand;

mod gc_converter;
pub use self::gc_converter::GcConverter;

mod gc_converter_node;
pub use self::gc_converter_node::GcConverterNode;

mod gc_enum_entry;
pub use self::gc_enum_entry::GcEnumEntry;

mod gc_enumeration;
pub use self::gc_enumeration::GcEnumeration;

mod gc_feature_node;
pub use self::gc_feature_node::GcFeatureNode;

mod gc_float;
pub use self::gc_float::GcFloat;

mod gc_float_node;
pub use self::gc_float_node::GcFloatNode;

mod gc_float_reg_node;
pub use self::gc_float_reg_node::GcFloatRegNode;

mod gc_group_node;
pub use self::gc_group_node::GcGroupNode;

mod gc_index_node;
pub use self::gc_index_node::GcIndexNode;

mod gc_int_converter_node;
pub use self::gc_int_converter_node::GcIntConverterNode;

mod gc_int_reg_node;
pub use self::gc_int_reg_node::GcIntRegNode;

mod gc_int_swiss_knife_node;
pub use self::gc_int_swiss_knife_node::GcIntSwissKnifeNode;

mod gc_integer;
pub use self::gc_integer::GcInteger;

mod gc_integer_node;
pub use self::gc_integer_node::GcIntegerNode;

mod gc_invalidator_node;
pub use self::gc_invalidator_node::GcInvalidatorNode;

mod gc_masked_int_reg_node;
pub use self::gc_masked_int_reg_node::GcMaskedIntRegNode;

mod gc_node;
pub use self::gc_node::GcNode;

mod gc_port;
pub use self::gc_port::GcPort;

mod gc_property_node;
pub use self::gc_property_node::GcPropertyNode;

mod gc_register;
pub use self::gc_register::GcRegister;

mod gc_register_description_node;
pub use self::gc_register_description_node::GcRegisterDescriptionNode;

mod gc_register_node;
pub use self::gc_register_node::GcRegisterNode;

mod gc_selector;
pub use self::gc_selector::GcSelector;

mod gc_string;
pub use self::gc_string::GcString;

mod gc_string_node;
pub use self::gc_string_node::GcStringNode;

mod gc_string_reg_node;
pub use self::gc_string_reg_node::GcStringRegNode;

mod gc_struct_entry_node;
pub use self::gc_struct_entry_node::GcStructEntryNode;

mod gc_struct_reg_node;
pub use self::gc_struct_reg_node::GcStructRegNode;

mod gc_swiss_knife;
pub use self::gc_swiss_knife::GcSwissKnife;

mod gc_swiss_knife_node;
pub use self::gc_swiss_knife_node::GcSwissKnifeNode;

mod gc_value_indexed_node;
pub use self::gc_value_indexed_node::GcValueIndexedNode;

mod gv_device;
pub use self::gv_device::GvDevice;

mod gv_fake_camera;
pub use self::gv_fake_camera::GvFakeCamera;

mod gv_interface;
pub use self::gv_interface::GvInterface;

mod gv_stream;
pub use self::gv_stream::GvStream;

mod interface;
pub use self::interface::Interface;

mod stream;
pub use self::stream::Stream;

mod uv_device;
pub use self::uv_device::UvDevice;

mod uv_interface;
pub use self::uv_interface::UvInterface;

mod uv_stream;
pub use self::uv_stream::UvStream;

mod xml_schema;
pub use self::xml_schema::XmlSchema;

mod enums;
#[cfg(feature = "v0_8_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_6")))]
pub use self::enums::AccessCheckPolicy;
pub use self::enums::AcquisitionMode;
pub use self::enums::Auto;
pub use self::enums::BufferPartDataType;
pub use self::enums::BufferPayloadType;
pub use self::enums::BufferStatus;
pub use self::enums::ChunkParserError;
pub use self::enums::ComponentSelectionFlags;
pub use self::enums::DeviceError;
pub use self::enums::DomNodeType;
pub use self::enums::ExposureMode;
pub use self::enums::GcAccessMode;
pub use self::enums::GcCachable;
pub use self::enums::GcDisplayNotation;
pub use self::enums::GcError;
pub use self::enums::GcIsLinear;
pub use self::enums::GcNameSpace;
pub use self::enums::GcPropertyNodeType;
pub use self::enums::GcRepresentation;
pub use self::enums::GcSignedness;
#[cfg(feature = "v0_8_8")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
pub use self::enums::GcStreamable;
pub use self::enums::GcVisibility;
pub use self::enums::GvIpConfigurationMode;
pub use self::enums::GvPacketSizeAdjustment;
pub use self::enums::GvStreamPacketResend;
pub use self::enums::GvStreamSocketBuffer;
#[cfg(feature = "v0_8_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_6")))]
pub use self::enums::RangeCheckPolicy;
pub use self::enums::RegisterCachePolicy;
pub use self::enums::StreamCallbackType;
pub use self::enums::UvUsbMode;
pub use self::enums::XmlSchemaError;

mod flags;
pub use self::flags::GvStreamOption;

pub(crate) mod traits {
	pub use super::camera::CameraExt;
	pub use super::device::DeviceExt;
	pub use super::dom_character_data::DomCharacterDataExt;
	pub use super::dom_document::DomDocumentExt;
	pub use super::dom_element::DomElementExt;
	pub use super::dom_named_node_map::DomNamedNodeMapExt;
	pub use super::dom_node::DomNodeExt;
	pub use super::dom_node_list::DomNodeListExt;
	pub use super::gc_feature_node::GcFeatureNodeExt;
	pub use super::gc_float::GcFloatExt;
	pub use super::gc_integer::GcIntegerExt;
	pub use super::gc_node::GcNodeExt;
	pub use super::gc_property_node::GcPropertyNodeExt;
	pub use super::gc_register::GcRegisterExt;
	pub use super::gc_selector::GcSelectorExt;
	pub use super::gc_string::GcStringExt;
	pub use super::interface::InterfaceExt;
	pub use super::stream::StreamExt;
}
