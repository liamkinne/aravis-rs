// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{ffi, DomElement, DomNode, DomText};
use glib::{prelude::*, translate::*};

glib::wrapper! {
///
///
/// This is an Abstract Base Class, you cannot instantiate it.
///
/// # Implements
///
/// [`DomDocumentExt`][trait@crate::prelude::DomDocumentExt], [`DomNodeExt`][trait@crate::prelude::DomNodeExt], [`trait@glib::ObjectExt`]
	#[doc(alias = "ArvDomDocument")]
	pub struct DomDocument(Object<ffi::ArvDomDocument, ffi::ArvDomDocumentClass>) @extends DomNode;

	match fn {
		type_ => || ffi::arv_dom_document_get_type(),
	}
}

impl DomDocument {
	pub const NONE: Option<&'static DomDocument> = None;

	//#[doc(alias = "arv_dom_document_new_from_memory")]
	//#[doc(alias = "new_from_memory")]
	//pub fn from_memory(buffer: /*Unimplemented*/Option<Basic: Pointer>, size: i32) -> Result<DomDocument, glib::Error> {
	//    unsafe { TODO: call ffi:arv_dom_document_new_from_memory() }
	//}

	#[doc(alias = "arv_dom_document_new_from_path")]
	#[doc(alias = "new_from_path")]
	pub fn from_path(path: &str) -> Result<DomDocument, glib::Error> {
		assert_initialized_main_thread!();
		unsafe {
			let mut error = std::ptr::null_mut();
			let ret = ffi::arv_dom_document_new_from_path(path.to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(from_glib_full(ret))
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	#[doc(alias = "arv_dom_document_new_from_url")]
	#[doc(alias = "new_from_url")]
	pub fn from_url(url: &str) -> Result<DomDocument, glib::Error> {
		assert_initialized_main_thread!();
		unsafe {
			let mut error = std::ptr::null_mut();
			let ret = ffi::arv_dom_document_new_from_url(url.to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(from_glib_full(ret))
			} else {
				Err(from_glib_full(error))
			}
		}
	}
}

unsafe impl Send for DomDocument {}

mod sealed {
	pub trait Sealed {}
	impl<T: super::IsA<super::DomDocument>> Sealed for T {}
}

/// Trait containing all [`struct@DomDocument`] methods.
///
/// # Implementors
///
/// [`DomDocument`][struct@crate::DomDocument], [`Gc`][struct@crate::Gc]
pub trait DomDocumentExt: IsA<DomDocument> + sealed::Sealed + 'static {
	//#[doc(alias = "arv_dom_document_append_from_memory")]
	//fn append_from_memory(&self, node: &impl IsA<DomNode>, buffer: /*Unimplemented*/Option<Basic: Pointer>, size: i32) -> Result<(), glib::Error> {
	//    unsafe { TODO: call ffi:arv_dom_document_append_from_memory() }
	//}

	#[doc(alias = "arv_dom_document_create_element")]
	fn create_element(&self, tag_name: &str) -> Option<DomElement> {
		unsafe {
			from_glib_full(ffi::arv_dom_document_create_element(
				self.as_ref().to_glib_none().0,
				tag_name.to_glib_none().0,
			))
		}
	}

	#[doc(alias = "arv_dom_document_create_text_node")]
	fn create_text_node(&self, data: &str) -> Option<DomText> {
		unsafe {
			from_glib_full(ffi::arv_dom_document_create_text_node(
				self.as_ref().to_glib_none().0,
				data.to_glib_none().0,
			))
		}
	}

	#[doc(alias = "arv_dom_document_get_document_element")]
	#[doc(alias = "get_document_element")]
	fn document_element(&self) -> Option<DomElement> {
		unsafe {
			from_glib_none(ffi::arv_dom_document_get_document_element(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	//#[doc(alias = "arv_dom_document_get_href_data")]
	//#[doc(alias = "get_href_data")]
	//fn href_data(&self, href: &str, size: usize) -> /*Unimplemented*/Option<Basic: Pointer> {
	//    unsafe { TODO: call ffi:arv_dom_document_get_href_data() }
	//}

	#[doc(alias = "arv_dom_document_get_url")]
	#[doc(alias = "get_url")]
	fn url(&self) -> Option<glib::GString> {
		unsafe {
			from_glib_none(ffi::arv_dom_document_get_url(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	#[doc(alias = "arv_dom_document_set_path")]
	fn set_path(&self, path: &str) {
		unsafe {
			ffi::arv_dom_document_set_path(self.as_ref().to_glib_none().0, path.to_glib_none().0);
		}
	}

	#[doc(alias = "arv_dom_document_set_url")]
	fn set_url(&self, url: &str) {
		unsafe {
			ffi::arv_dom_document_set_url(self.as_ref().to_glib_none().0, url.to_glib_none().0);
		}
	}
}

impl<O: IsA<DomDocument>> DomDocumentExt for O {}
