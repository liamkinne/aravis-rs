// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{ffi, DomElement, DomNode, GcFeatureNode, GcNode};
use glib::{prelude::*, translate::*};

glib::wrapper! {
///
///
/// # Implements
///
/// [`GcFeatureNodeExt`][trait@crate::prelude::GcFeatureNodeExt], [`GcNodeExt`][trait@crate::prelude::GcNodeExt], [`DomElementExt`][trait@crate::prelude::DomElementExt], [`DomNodeExt`][trait@crate::prelude::DomNodeExt], [`trait@glib::ObjectExt`]
	#[doc(alias = "ArvGcCategory")]
	pub struct GcCategory(Object<ffi::ArvGcCategory, ffi::ArvGcCategoryClass>) @extends GcFeatureNode, GcNode, DomElement, DomNode;

	match fn {
		type_ => || ffi::arv_gc_category_get_type(),
	}
}

impl GcCategory {
	#[doc(alias = "arv_gc_category_new")]
	pub fn new() -> GcCategory {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_category_new()).unsafe_cast() }
	}

/// Get a list of strings with the name of the features listed in the given category node.
///
/// # Returns
///
/// a list of strings.
	#[doc(alias = "arv_gc_category_get_features")]
	#[doc(alias = "get_features")]
	pub fn features(&self) -> Vec<glib::GString> {
		unsafe {
			FromGlibPtrContainer::from_glib_none(ffi::arv_gc_category_get_features(
				self.to_glib_none().0,
			))
		}
	}
}

impl Default for GcCategory {
	fn default() -> Self {
		Self::new()
	}
}

unsafe impl Send for GcCategory {}
