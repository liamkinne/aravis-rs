// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{ffi, DomElement, DomNode, GcFeatureNode, GcFloat, GcNode};
use glib::{prelude::*, translate::*};

glib::wrapper! {
///
///
/// # Implements
///
/// [`GcFeatureNodeExt`][trait@crate::prelude::GcFeatureNodeExt], [`GcNodeExt`][trait@crate::prelude::GcNodeExt], [`DomElementExt`][trait@crate::prelude::DomElementExt], [`DomNodeExt`][trait@crate::prelude::DomNodeExt], [`trait@glib::ObjectExt`], [`GcFloatExt`][trait@crate::prelude::GcFloatExt]
	#[doc(alias = "ArvGcFloatNode")]
	pub struct GcFloatNode(Object<ffi::ArvGcFloatNode, ffi::ArvGcFloatNodeClass>) @extends GcFeatureNode, GcNode, DomElement, DomNode, @implements GcFloat;

	match fn {
		type_ => || ffi::arv_gc_float_node_get_type(),
	}
}

impl GcFloatNode {
	#[doc(alias = "arv_gc_float_node_new")]
	pub fn new() -> GcFloatNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_float_node_new()).unsafe_cast() }
	}
}

impl Default for GcFloatNode {
	fn default() -> Self {
		Self::new()
	}
}

unsafe impl Send for GcFloatNode {}
