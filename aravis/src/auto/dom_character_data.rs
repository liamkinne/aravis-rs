// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{ffi, DomNode};
use glib::{prelude::*, translate::*};

glib::wrapper! {
///
///
/// This is an Abstract Base Class, you cannot instantiate it.
///
/// # Implements
///
/// [`DomCharacterDataExt`][trait@crate::prelude::DomCharacterDataExt], [`DomNodeExt`][trait@crate::prelude::DomNodeExt], [`trait@glib::ObjectExt`]
	#[doc(alias = "ArvDomCharacterData")]
	pub struct DomCharacterData(Object<ffi::ArvDomCharacterData, ffi::ArvDomCharacterDataClass>) @extends DomNode;

	match fn {
		type_ => || ffi::arv_dom_character_data_get_type(),
	}
}

impl DomCharacterData {
	pub const NONE: Option<&'static DomCharacterData> = None;
}

unsafe impl Send for DomCharacterData {}

mod sealed {
	pub trait Sealed {}
	impl<T: super::IsA<super::DomCharacterData>> Sealed for T {}
}

/// Trait containing all [`struct@DomCharacterData`] methods.
///
/// # Implementors
///
/// [`DomCharacterData`][struct@crate::DomCharacterData], [`DomText`][struct@crate::DomText]
pub trait DomCharacterDataExt: IsA<DomCharacterData> + sealed::Sealed + 'static {
	#[doc(alias = "arv_dom_character_data_get_data")]
	#[doc(alias = "get_data")]
	fn data(&self) -> Option<glib::GString> {
		unsafe {
			from_glib_none(ffi::arv_dom_character_data_get_data(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	#[doc(alias = "arv_dom_character_data_set_data")]
	fn set_data(&self, value: &str) {
		unsafe {
			ffi::arv_dom_character_data_set_data(
				self.as_ref().to_glib_none().0,
				value.to_glib_none().0,
			);
		}
	}
}

impl<O: IsA<DomCharacterData>> DomCharacterDataExt for O {}
