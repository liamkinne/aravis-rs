// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{ffi, DomElement, DomNode, GcFeatureNode, GcInteger, GcNode, GcSelector};
use glib::{prelude::*, translate::*};

glib::wrapper! {
///
///
/// # Implements
///
/// [`GcFeatureNodeExt`][trait@crate::prelude::GcFeatureNodeExt], [`GcNodeExt`][trait@crate::prelude::GcNodeExt], [`DomElementExt`][trait@crate::prelude::DomElementExt], [`DomNodeExt`][trait@crate::prelude::DomNodeExt], [`trait@glib::ObjectExt`], [`GcIntegerExt`][trait@crate::prelude::GcIntegerExt], [`GcSelectorExt`][trait@crate::prelude::GcSelectorExt]
	#[doc(alias = "ArvGcIntegerNode")]
	pub struct GcIntegerNode(Object<ffi::ArvGcIntegerNode, ffi::ArvGcIntegerNodeClass>) @extends GcFeatureNode, GcNode, DomElement, DomNode, @implements GcInteger, GcSelector;

	match fn {
		type_ => || ffi::arv_gc_integer_node_get_type(),
	}
}

impl GcIntegerNode {
	#[doc(alias = "arv_gc_integer_node_new")]
	pub fn new() -> GcIntegerNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_integer_node_new()).unsafe_cast() }
	}
}

impl Default for GcIntegerNode {
	fn default() -> Self {
		Self::new()
	}
}

unsafe impl Send for GcIntegerNode {}
