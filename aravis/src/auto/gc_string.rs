// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

glib::wrapper! {
///
///
/// # Implements
///
/// [`GcStringExt`][trait@crate::prelude::GcStringExt]
	#[doc(alias = "ArvGcString")]
	pub struct GcString(Interface<ffi::ArvGcString, ffi::ArvGcStringInterface>);

	match fn {
		type_ => || ffi::arv_gc_string_get_type(),
	}
}

impl GcString {
	pub const NONE: Option<&'static GcString> = None;
}

unsafe impl Send for GcString {}

mod sealed {
	pub trait Sealed {}
	impl<T: super::IsA<super::GcString>> Sealed for T {}
}

/// Trait containing all [`struct@GcString`] methods.
///
/// # Implementors
///
/// [`GcEnumeration`][struct@crate::GcEnumeration], [`GcStringNode`][struct@crate::GcStringNode], [`GcStringRegNode`][struct@crate::GcStringRegNode], [`GcString`][struct@crate::GcString]
pub trait GcStringExt: IsA<GcString> + sealed::Sealed + 'static {
	#[doc(alias = "arv_gc_string_get_max_length")]
	#[doc(alias = "get_max_length")]
	fn max_length(&self) -> Result<i64, glib::Error> {
		unsafe {
			let mut error = std::ptr::null_mut();
			let ret = ffi::arv_gc_string_get_max_length(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(ret)
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	#[doc(alias = "arv_gc_string_get_value")]
	#[doc(alias = "get_value")]
	fn value(&self) -> Result<glib::GString, glib::Error> {
		unsafe {
			let mut error = std::ptr::null_mut();
			let ret = ffi::arv_gc_string_get_value(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(from_glib_none(ret))
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	#[doc(alias = "arv_gc_string_set_value")]
	fn set_value(&self, value: &str) -> Result<(), glib::Error> {
		unsafe {
			let mut error = std::ptr::null_mut();
			let _ = ffi::arv_gc_string_set_value(
				self.as_ref().to_glib_none().0,
				value.to_glib_none().0,
				&mut error,
			);
			if error.is_null() {
				Ok(())
			} else {
				Err(from_glib_full(error))
			}
		}
	}
}

impl<O: IsA<GcString>> GcStringExt for O {}
