// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::ffi;
use glib::{bitflags::bitflags, prelude::*, translate::*};

bitflags! {
	#[doc(alias = "ArvGvStreamOption")]
	pub struct GvStreamOption: u32 {
		#[doc(alias = "ARV_GV_STREAM_OPTION_NONE")]
		const NONE = ffi::ARV_GV_STREAM_OPTION_NONE as _;
		#[doc(alias = "ARV_GV_STREAM_OPTION_PACKET_SOCKET_DISABLED")]
		const PACKET_SOCKET_DISABLED = ffi::ARV_GV_STREAM_OPTION_PACKET_SOCKET_DISABLED as _;
	}
}

#[doc(hidden)]
impl IntoGlib for GvStreamOption {
	type GlibType = ffi::ArvGvStreamOption;

	#[inline]
	fn into_glib(self) -> ffi::ArvGvStreamOption {
		self.bits()
	}
}

#[doc(hidden)]
impl FromGlib<ffi::ArvGvStreamOption> for GvStreamOption {
	#[inline]
	unsafe fn from_glib(value: ffi::ArvGvStreamOption) -> Self {
		skip_assert_initialized!();
		Self::from_bits_truncate(value)
	}
}

impl StaticType for GvStreamOption {
	#[inline]
	#[doc(alias = "arv_gv_stream_option_get_type")]
	fn static_type() -> glib::Type {
		unsafe { from_glib(ffi::arv_gv_stream_option_get_type()) }
	}
}

impl glib::HasParamSpec for GvStreamOption {
	type ParamSpec = glib::ParamSpecFlags;
	type SetValue = Self;
	type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;

	fn param_spec_builder() -> Self::BuilderFn {
		Self::ParamSpec::builder
	}
}

impl glib::value::ValueType for GvStreamOption {
	type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for GvStreamOption {
	type Checker = glib::value::GenericValueTypeChecker<Self>;

	#[inline]
	unsafe fn from_value(value: &'a glib::Value) -> Self {
		skip_assert_initialized!();
		from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
	}
}

impl ToValue for GvStreamOption {
	#[inline]
	fn to_value(&self) -> glib::Value {
		let mut value = glib::Value::for_value_type::<Self>();
		unsafe {
			glib::gobject_ffi::g_value_set_flags(
				value.to_glib_none_mut().0,
				self.clone().into_glib(),
			);
		}
		value
	}

	#[inline]
	fn value_type(&self) -> glib::Type {
		Self::static_type()
	}
}

impl From<GvStreamOption> for glib::Value {
	#[inline]
	fn from(v: GvStreamOption) -> Self {
		skip_assert_initialized!();
		ToValue::to_value(&v)
	}
}
